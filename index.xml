<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ovaar - Software engineering blog</title>
    <link>https://ovaar.github.io/</link>
    <description>Recent content on Ovaar - Software engineering blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ovaar.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure pipelines cross-platform scripts</title>
      <link>https://ovaar.github.io/blog/azure-pipelines-cross-platform-scripts/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/azure-pipelines-cross-platform-scripts/</guid>
      <description>&lt;h1 id=&#34;azure-pipelines-cross-platform-scripts&#34;&gt;Azure pipelines cross-platform scripts&lt;/h1&gt;
&lt;p&gt;To keep things simple when setting up a CI/CD pipeline for a cross-platform application we cautiously have to consider our options for running the steps in what scripting language, because we don&amp;rsquo;t want to end up with scripts that do the same thing functionally, but are different for each platform, which means extra maintenance and complexity for the maintainers.&lt;/p&gt;
&lt;p&gt;So we have to consider languages like Powershell, Bash, Zsh or Python for to run on Windows, macOS and Linux.&lt;/p&gt;
&lt;h2 id=&#34;bash-or-powershell&#34;&gt;Bash or Powershell&lt;/h2&gt;
&lt;p&gt;By default Linux and macOS come with Bash installed, except for Windows, though its likely that your Windows machine already has Git Bash or Window Subsystem for Linux installed.&lt;/p&gt;
&lt;p&gt;I personally prefer Bash, because I find that the amount of text I need to write in Powershell in comparison to Bash to accomplish something is to big. Secondly, Bash is such a commonly used
scripting language and it is so easy to find on the internet how to implement something that the productivity is much higher.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Git for Windows v2.45.2&lt;/span&gt;
$ bash --version
GNU bash, version 5.2.26&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-release &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x86_64-pc-msys&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Bash on Mac Pro 2023 (12.7.5 Monterey)&lt;/span&gt;
$ bash --version
GNU bash, version 3.2.57&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-release &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x86_64-apple-darwin21&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt; Free Software Foundation, Inc.

&lt;span style=&#34;color:#75715e&#34;&gt;# Bash on Mac Mini M1 2020 (14.5 Sonoma)&lt;/span&gt;
$ bash --version
GNU bash, version 3.2.57&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-release &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arm64-apple-darwin23&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Copyright &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2007&lt;/span&gt; Free Software Foundation, Inc.

&lt;span style=&#34;color:#75715e&#34;&gt;# Bash on Ubuntu (20.24 Focal Fossa)&lt;/span&gt;
$ bash --version
GNU bash, version 5.0.6&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;-release &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x86_64&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see there are quite some differences in versions between platforms. Especially, macOS comes with an ancient version of Bash, which reduces the amount of modern Bash feature you can use. Depending on your needs this could be a limiting factor, though with you&amp;rsquo;ll often find that with a limiting amount of changes you can achieve the same thing.&lt;/p&gt;
&lt;h3 id=&#34;preparing-git-for-windows&#34;&gt;Preparing Git for Windows&lt;/h3&gt;
&lt;p&gt;To prepare the Windows agent install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git for Windows&lt;/a&gt; and make sure to add the &lt;code&gt;C:\Program Files\Git\bin&lt;/code&gt; directory to the PATH.&lt;/p&gt;
&lt;h2 id=&#34;the-pipeline-definition&#34;&gt;The pipeline definition&lt;/h2&gt;
&lt;p&gt;Let get started by creating a &lt;code&gt;azure-pipelines.yml&lt;/code&gt; file and setup our platform parameters so that the pipeline can conditionally be run. Next we&amp;rsquo;ll utilize a &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/jobs-job-strategy?view=azure-pipelines#build-on-multiple-platforms&#34;&gt;jobs strategy matrix&lt;/a&gt; to start the pipeline on the selected platforms&#39; agents.&lt;/p&gt;
&lt;p&gt;Resulting in each agent running the step &amp;ldquo;Getting started&amp;rdquo; that will print something to our terminal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# azure-pipelines.yml&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cross_platform_ci&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;parameters&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;windows_vs_2022&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;boolean&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;macOS_x86_64&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;boolean&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;macos_arm64&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;boolean&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu_x86_64&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;boolean&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;pool&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;$(poolName)&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;job&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pipeline job&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/jobs-job-strategy&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;matrix&lt;/span&gt;:
        &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ if eq(parameters.windows_vs_2022, true) }}:&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;windows_vs_2022&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;poolName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;windows_vs_2022&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ if eq(parameters.macOS_x86_64, true) }}:&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;macOS_x86_64&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;poolName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;macOS_x86_64&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ if eq(parameters.macos_arm64, true) }}:&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;macOS_arm64&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;poolName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;macos_arm64&amp;#34;&lt;/span&gt;

        &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ if eq(parameters.ubuntu_x86_64, true) }}:&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;ubuntu_x86_64&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;poolName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ubuntu_x86_64&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;bash&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          set -euo pipefail
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          echo &amp;#34;Hello Azure pipeline from $AGENT_OS!&amp;#34;&lt;/span&gt;          
        &lt;span style=&#34;color:#f92672&#34;&gt;displayName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Getting started&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;failing-a-bash-step-in-azure-pipelines&#34;&gt;Failing a Bash step in Azure pipelines&lt;/h3&gt;
&lt;p&gt;By default commands that are executed in a Bash step will not fail the pipeline if they returned a non-zero exit code, unless we explicitly tell bash to fail.&lt;/p&gt;
&lt;p&gt;We can set these options using &lt;a href=&#34;https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html&#34;&gt;Bash Set&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I personally prefer setting the following options&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;set -euo pipefail

&lt;span style=&#34;color:#75715e&#34;&gt;# -e Exit immediately if a pipeline returns a non-zero status&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -u Treat unset variables and parameters as an error when performing parameter expansion.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# -o pipefail Exit if a pipe returns a non-zero status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How to typed command line arguments in python</title>
      <link>https://ovaar.github.io/blog/how-to-typed-command-line-arguments-in-python/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-typed-command-line-arguments-in-python/</guid>
      <description>&lt;h1 id=&#34;how-to-typed-command-line-arguments-in-python&#34;&gt;How to typed command line arguments in python&lt;/h1&gt;
&lt;p&gt;Creating tools with python is a common practice due to its ease of use and productivity. Now python already has good built-in support for parsing command-line arguments, but we can take it one step further.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the following example where we would like to create a platform independent build script that should be able to accept the build type and an option to rebuild.&lt;/p&gt;
&lt;p&gt;Since python3 we want to utilize the typing system as much as possible, meaning that the options the user can use as input for the commandline arguments are created from types so that if the types change the script arguments are automatically updated.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser&#34;&gt;ArgumentParser&lt;/a&gt; &lt;code&gt;type&lt;/code&gt; parameter accepts a function that can help us to validate and transform the input data. A very useful class is &lt;a href=&#34;https://docs.python.org/3/library/enum.html#enum.StrEnum&#34;&gt;StrEnum&lt;/a&gt; which, when inherited from, enables bidirectional conversion of string to enum. We can use this class to strictly declare which values our build_type argument accepts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Platform independent build script.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argparse
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; errno
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pathlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Final

&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; enum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StrEnum
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Install python &amp;gt;= 3.11&amp;#34;&lt;/span&gt;)


DEFAULT_SOLUTION_PATH: Final[Path] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application.sln&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BuildType&lt;/span&gt;(StrEnum):
    Debug &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Debug&amp;#34;&lt;/span&gt;
    Release &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Release&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_build_type&lt;/span&gt;(arg: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; BuildType:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BuildType[arg]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentTypeError(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid argument build_type &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;arg&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_path&lt;/span&gt;(arg: str) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; Path:
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Path(arg)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FileNotFoundError&lt;/span&gt;(errno&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ENOENT, os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strerror(errno&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ENOENT), arg)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(solution_path: Path, build_type: BuildType, rebuild: bool):
    print(
        &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;str(solution_path)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; build_type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;build_type&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rebuild&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rebuild &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    )


parser &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Build my application.&amp;#34;&lt;/span&gt;)
parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-b&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--build_type&amp;#34;&lt;/span&gt;,
    type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;to_build_type,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Set the build type &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(list(BuildType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_member_names_))&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt;,
    required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
)
parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--rebuild&amp;#34;&lt;/span&gt;,
    dest&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rebuild&amp;#34;&lt;/span&gt;,
    action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;store_true&amp;#34;&lt;/span&gt;,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;When set a rebuild is started.&amp;#34;&lt;/span&gt;,
)
parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_argument(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--path&amp;#34;&lt;/span&gt;,
    dest&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;,
    type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;to_path,
    help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The solution file path (optional, default=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;str(DEFAULT_SOLUTION_PATH)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;).&amp;#34;&lt;/span&gt;,
)

args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_args()
build_type: BuildType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;build_type
solution_path: Path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; DEFAULT_SOLUTION_PATH

main(solution_path, build_type, args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rebuild)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ python build.py --help
usage: build.py &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-h&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; -b BUILD_TYPE &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--rebuild&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;--path PATH&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

Build my application.

options:
  -h, --help            show this help message and exit
  -b BUILD_TYPE, --build_type BUILD_TYPE
                        Set the build type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Debug|Release&amp;#34;&lt;/span&gt;
  --rebuild             When set a rebuild is started.
  --path PATH           The solution file path &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;optional, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;application.sln&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.


$ python build.py --build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release
application.sln build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release


$ python build.py --build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;RelWithDebug
build.py: error: argument -b/--build_type: Invalid argument build_type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RelWithDebug&amp;#39;&lt;/span&gt;!


$ python build.py --build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release --rebuild
application.sln build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release rebuild


$ python build.py --build_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Release --path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nopath.sln
File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;build.py&amp;#34;&lt;/span&gt;, line 38, in to_path
    raise FileNotFoundError&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;errno.ENOENT, os.strerror&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;errno.ENOENT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, arg&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
FileNotFoundError: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Errno 2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; No such file or directory: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nopath.sln&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How to call a function of a file in python</title>
      <link>https://ovaar.github.io/blog/how-to-call-function-of-file-in-python/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-call-function-of-file-in-python/</guid>
      <description>&lt;h1 id=&#34;how-to-call-a-function-of-a-file-in-python&#34;&gt;How to call a function of a file in python&lt;/h1&gt;
&lt;p&gt;Take the following use case, where I have a script that I use in my Continues Integration (CI) pipeline and I would like to call a function in that file from the command-line with parameters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/3/library/inspect.html&#34;&gt;inspect&lt;/a&gt; module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects. For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In more detail, the &lt;a href=&#34;https://docs.python.org/3/library/inspect.html#inspect.Signature&#34;&gt;class inspect.Signature&lt;/a&gt; provides the ability to capture the signature of a Callable object, meaning that it returns the parameters of the function including each parameters type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# @file: myscript.py&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; inspect
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(bar: str):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo(bar=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bar&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# args[0]  = current file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# args[1]  = function name&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# args[2:] = function args : (*unpacked)&lt;/span&gt;
    func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; globals()[sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]
    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(arg &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arg)
    kwargs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict(arg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; arg &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:] &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; arg)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# Binds / maps the command-line arguments to the function&lt;/span&gt;
        bound_arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inspect&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;signature(func)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
        func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bound_arguments&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;bound_arguments&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;kwargs)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e: &lt;span style=&#34;color:#75715e&#34;&gt;# throws params mismatched&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; e
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets break the example down.
The main expects one or more command-line arguments that are used to lookup a function by name with parameters in the current python file.
Using &lt;code&gt;globals&lt;/code&gt; we can retrieve the Callable object to our function by name. Secondly, the optional remaining arguments are sliced from &lt;code&gt;sys.argv&lt;/code&gt; and converted to a list of &lt;code&gt;args&lt;/code&gt; and mapped to a dictionary of keyword argument conditionally if the parameter contains a &lt;code&gt;=&lt;/code&gt; in the string. Finally, using &lt;a href=&#34;https://docs.python.org/3/library/inspect.html#inspect.Signature.bind&#34;&gt;inspect.Signature.bind&lt;/a&gt; the parameters are mapped to the function. The function is called if the conditions call signature are met, otherwise it throws.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call using positional arguments&lt;/span&gt;
$ python3 myscript.py foo baz
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo(bar=baz)&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Call using keyword arguments&lt;/span&gt;
$ python3 myscript.py foo bar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;baz
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo(bar=baz)&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Practical cppstd 17 highlights by example</title>
      <link>https://ovaar.github.io/blog/practical-cppstd17/</link>
      <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/practical-cppstd17/</guid>
      <description>&lt;h1 id=&#34;practical-cppstd-17-highlights-by-example&#34;&gt;Practical cppstd 17 highlights by example&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#language-features&#34;&gt;Language Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#library-features&#34;&gt;Library Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;language-features&#34;&gt;Language Features&lt;/h2&gt;
&lt;h3 id=&#34;nested-namespace-definitions&#34;&gt;Nested namespace definitions&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; A&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;B&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;C {
   &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#75715e&#34;&gt;// Rather than:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; A {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; B {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; C {
            &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;structured-bindings&#34;&gt;Structured bindings&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vector3&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; X;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; Z;
};
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; MappingPair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; [x, y, z] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vector3{&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0f&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; mapping
    {
        {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;},
        {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;}
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; [it, isInserted] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapping.insert(MappingPair{&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;});
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; it&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;second &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; [key, value] &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; mapping)
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;selection-statements-with-initializer&#34;&gt;Selection statements with initializer&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;{
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lk(mx);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v.empty()) v.push_back(val);
}
&lt;span style=&#34;color:#75715e&#34;&gt;// vs.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lk(mx); v.empty()) {
  v.push_back(val);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constexpr-if&#34;&gt;constexpr if&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; isIntegral() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;constexpr&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_integral&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;value) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
  }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;static_assert&lt;/span&gt;(isIntegral&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; true);
&lt;span style=&#34;color:#66d9ef&#34;&gt;static_assert&lt;/span&gt;(isIntegral&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; true);
&lt;span style=&#34;color:#66d9ef&#34;&gt;static_assert&lt;/span&gt;(isIntegral&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; false);
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt; {};
&lt;span style=&#34;color:#66d9ef&#34;&gt;static_assert&lt;/span&gt;(isIntegral&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; false);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;class-template-argument-deduction&#34;&gt;Class template argument deduction&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pair{&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;}; &lt;span style=&#34;color:#75715e&#34;&gt;// Deduces to std::pair&amp;lt;double, std::string&amp;gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fallthrough-nodiscard-maybe_unused-attributes&#34;&gt;[[fallthrough]], [[nodiscard]], [[maybe_unused]] attributes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[[fallthrough]] indicates to the compiler that falling through in a switch statement is intended behavior. This attribute may only be used in a switch statement, and must be placed before the next case/default label.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (n) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;[[fallthrough]]&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;[[fallthrough]]&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;[[nodiscard]] issues a warning when either a function or class has this attribute and its return value is discarded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[[nodiscard]]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; do_something() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; is_success; &lt;span style=&#34;color:#75715e&#34;&gt;// true for success, false for failure
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

do_something(); &lt;span style=&#34;color:#75715e&#34;&gt;// warning: ignoring return value of &amp;#39;bool do_something()&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// declared with attribute &amp;#39;nodiscard&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Only issues a warning when `error_info` is returned by value.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;[[nodiscard]]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;error_info&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};

error_info &lt;span style=&#34;color:#a6e22e&#34;&gt;do_something&lt;/span&gt;() {
  error_info ei;
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ei;
}

do_something(); &lt;span style=&#34;color:#75715e&#34;&gt;// warning: ignoring returned value of type &amp;#39;error_info&amp;#39;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// declared with attribute &amp;#39;nodiscard&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;[[maybe_unused]] indicates to the compiler that a variable or parameter might be unused and is intended.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_callback&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string msg, &lt;span style=&#34;color:#a6e22e&#34;&gt;[[maybe_unused]]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; error) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// Don&amp;#39;t care if `msg` is an error message, just log it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  log(msg);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;library-features&#34;&gt;Library Features&lt;/h2&gt;
&lt;h3 id=&#34;stdvariant&#34;&gt;std::variant&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;variant&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; SettingVarT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SettingVisitorWithClosure&lt;/span&gt;
{
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    SettingVisitorWithClosure(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; str)
        &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; _str(str)
    {
    } 

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt;()(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; args)
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _str &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; integer &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;operator&lt;/span&gt;()(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string args)
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; _str &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; string &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    }

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string _str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{ 
    SettingVarT setting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;////////////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Lambda std::variant visitor without closure
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;visit([](&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; args)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;decay_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(args)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_same_v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
        {
            std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_same_v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
        {
            std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; args &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
        }
    }, setting);

    &lt;span style=&#34;color:#75715e&#34;&gt;////////////////////////////////////////////////////////////////////////////////
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Variant visitor with closure
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    SettingVisitorWithClosure closure(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;visit(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;move(closure), setting);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdoptional&#34;&gt;std::optional&lt;/h3&gt;
&lt;p&gt;characteristics: value-type
common use case: return value of a function that may fail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GetEvenString(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((number &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Even&amp;#34;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;nullopt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; evenOpt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;nullopt;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; evenOpt.value_or(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;empty&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    evenOpt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetEvenString(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; evenOpt.value() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GetEvenString(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;branch&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdstring_view&#34;&gt;std::string_view&lt;/h3&gt;
&lt;p&gt;characteristics: value-type
description: Unlike std::string, which keeps its own copy of the string, std::string_view provides a view of a string that is defined elsewhere. 
common use case: Optimization when parsing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string_view MY_BEARD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;beard&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string str { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   trim me&amp;#34;&lt;/span&gt; };
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string_view view { str };
    view.remove_prefix(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;min(view.find_first_not_of(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;), view.size()));
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color:#75715e&#34;&gt;//  == &amp;#34;   trim me&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; view &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color:#75715e&#34;&gt;// == &amp;#34;trim me&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; view &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; MY_BEARD &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl; &lt;span style=&#34;color:#75715e&#34;&gt;// == &amp;#34;trim me beard&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdfilesystem&#34;&gt;std::filesystem&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;filesystem&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; fs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;filesystem;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayFileInfo&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; pathToShow, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; indentation, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; filename)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayDirTree&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; pathToShow, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; level)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;exists(pathToShow) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_directory(pathToShow))
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; indent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string(level &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; entry : fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;directory_iterator(pathToShow))
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry.path().filename();
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_directory(entry.status()))
            {
                std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; indent &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
                DisplayDirTree(entry, level &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
                std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_regular_file(entry.status()))
            {
                DisplayFileInfo(entry, indent, filename);
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
            {
                std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; indent &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; [?]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
            }
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DisplayDirectoryTree&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; pathToShow)
{
    DisplayDirTree(pathToShow, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{
    fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;path p1(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;temp&amp;#34;&lt;/span&gt;);
    p1 &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;;
    p1 &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;;

    fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;path p2(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    p2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;;
    p2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;;

    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; currentPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fs&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;temp_directory_path();
    DisplayDirectoryTree(currentPath);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdbyte&#34;&gt;std::byte&lt;/h3&gt;
&lt;p&gt;Unlike &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;unsigned char&lt;/code&gt; &lt;code&gt;std::byte&lt;/code&gt; is not a character or arithmetic type. A byte is a collection of bits that only allows bitwise operations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstddef&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bitset&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; os, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;byte b) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; os &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;bitset&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;to_integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(b));
}
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;byte b{&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    &lt;span style=&#34;color:#75715e&#34;&gt;// b *= 2 compilation error
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    b &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;byte{&lt;span style=&#34;color:#ae81ff&#34;&gt;0b11110000&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;byte{&lt;span style=&#34;color:#ae81ff&#34;&gt;0b11110000&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
 
    b &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;byte{&lt;span style=&#34;color:#ae81ff&#34;&gt;0b11111111&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8. &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 00101010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 01010100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 3. 00101010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 4. 01010100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 5. 00010101
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 6. 11111010
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 7. 11110000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 8. 00001111
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;splicing-maps-and-sets&#34;&gt;Splicing maps and sets&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You will now be able to directly move internal nodes from one node-based container directly into another container of the same type. Why is that important? Because it guarantees no memory allocation overhead, no copying of keys or values, and even no exceptions if the container’s comparison function doesn’t throw.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;New methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;std::map::extract&lt;/li&gt;
&lt;li&gt;std::map::merge&lt;/li&gt;
&lt;li&gt;std::set::extract&lt;/li&gt;
&lt;li&gt;std::set::merge&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; K, &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; V&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; o, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K,V&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; p)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; o &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.first &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; p.second &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collection_type&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; Collection, &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collection_type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; T;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; collection_type_t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; collection_type&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;type;

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; print_collection(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; c)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;collection_type_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Collection&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; out_it(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy(c.cbegin(), c.cend(), out_it);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MapT&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;K&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; print_collection(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; MapT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;K, V&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; map)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pair : map)
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pair &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// 1. Merge two containers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; src {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dst {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;};
    dst.merge(src);

    print_collection(dst);
    print_collection(src);

    &lt;span style=&#34;color:#75715e&#34;&gt;// 2. Changing element node key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; m {{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;three&amp;#34;&lt;/span&gt;}};
    print_collection(m);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; nodeHandle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m.extract(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// {2, &amp;#34;two&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
    print_collection(m);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;nodeHandle.empty())
    {
        nodeHandle.key() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
        m.insert(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;move(nodeHandle));
    }
    print_collection(m);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;parallel-algorithms&#34;&gt;Parallel algorithms&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Viewer&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;EntityHandle&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; entities; &lt;span style=&#34;color:#75715e&#34;&gt;// Long list of entities.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Sort using parallel execution policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sort(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;execution&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;par, entities.begin(), entities.end());
    &lt;span style=&#34;color:#75715e&#34;&gt;// Sort using sequential execution policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sort(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;execution&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;seq, entities.begin(), entities.end());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdnot_fn&#34;&gt;std::not_fn&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iterator&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream_iterator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ostream_it{ std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; is_even &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [](&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; n) { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; };
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v{ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; };

    &lt;span style=&#34;color:#75715e&#34;&gt;// Print all even numbers.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy_if(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cbegin(v), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cend(v), ostream_it, is_even); &lt;span style=&#34;color:#75715e&#34;&gt;// 0 2 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;// Print all odd (not even) numbers.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;copy_if(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cbegin(v), std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cend(v), ostream_it, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;not_fn(is_even)); &lt;span style=&#34;color:#75715e&#34;&gt;// 1 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;stdshared_mutex&#34;&gt;std::shared_mutex&lt;/h3&gt;
&lt;p&gt;Allows shared and exclusive access to resource.&lt;/p&gt;
&lt;p&gt;Shared mutexes are especially useful when shared data can be safely read by any number of threads simultaneously, but a thread may only write the same data when no other thread is reading or writing at the same time.&lt;/p&gt;
&lt;p&gt;// Compile with &lt;code&gt;-std=c++17 -pthread&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;shared_mutex&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_mutex mutex;

&lt;span style=&#34;color:#75715e&#34;&gt;// Reads the value and sets v to that value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readValue&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_lock&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_mutex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; guard(mutex);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;));
        v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value;
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Sets value to v
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setValue&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v)
{
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;lock_guard&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_mutex&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; guard(mutex);

    &lt;span style=&#34;color:#75715e&#34;&gt;// Simulate some latency
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;));
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WRITE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read1;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; read3;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;thread&lt;/span&gt; t1(readValue, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ref(read1));
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;thread&lt;/span&gt; t2(readValue, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ref(read2));
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;thread&lt;/span&gt; t3(readValue, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ref(read3));
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;thread&lt;/span&gt; t4(setValue, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);

    t1.join();
    t2.join();
    t3.join();
    t4.join();

    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; read1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; read2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; read3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Create an array of all possible variants alternatives of std::variant type</title>
      <link>https://ovaar.github.io/blog/cpp-make-variant-alternatives-array/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/cpp-make-variant-alternatives-array/</guid>
      <description>&lt;p&gt;The standard library &lt;a href=&#34;https://en.cppreference.com/w/cpp/utility/variant&#34;&gt;std::variant&lt;/a&gt; is a usefull feature, introduced since c++17, to define a type that can hold multiple alternative types.&lt;/p&gt;
&lt;p&gt;For example a cell of a CSV file could represent multiple data types such as a string or int. Declaring a new type &lt;code&gt;std::variant&amp;lt;std::string, int&amp;gt;&lt;/code&gt; allows to store one of the alternative types at the time. The std::variant internally allocates space for the largest alternative type.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what if you need to extract what the possible alternatives of the std::variant ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are some helper method than can give away some information about the internals of the declared std::variant type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variant_size, variant_size_v: obtains the size of the variant&amp;rsquo;s list of alternatives at compile time&lt;/li&gt;
&lt;li&gt;variant_alternative variant_alternative_t: obtains the type of the alternative specified by its index, at compile time&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;variant&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;type_traits&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; Template, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t I&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; make_variant_alternative()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;variant_alternative_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;I, Template&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Type{};
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; detail
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t I, &lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; VariantType, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VariantAlternativesLoop&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; arr)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;// Instantiate a new instance of one of the concrete std::variant types by index.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            arr[I &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_variant_alternative&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;VariantType, I &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();

            &lt;span style=&#34;color:#75715e&#34;&gt;// Continue the loop
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            VariantAlternativesLoop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;I &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;impl(arr);
        }
    };

    &lt;span style=&#34;color:#75715e&#34;&gt;// Provide default implementation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; VariantType, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VariantAlternativesLoop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt;(std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#75715e&#34;&gt;// Do nothing (terminate loop)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
    };
} &lt;span style=&#34;color:#75715e&#34;&gt;// namespace detail
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typename&lt;/span&gt; VariantType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; make_variant_alternatives_array()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t      N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;variant_size_v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;VariantType&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; variantsArray;

    detail&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;VariantAlternativesLoop&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;N, VariantType, N&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;impl(variantsArray);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; variantsArray;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; property_t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;variant&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; ()
{ 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; properties &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; make_variant_alternatives_array&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;property_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; properties.size(); &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
    {
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;visit([](&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; args)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;decay_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;decltype&lt;/span&gt;(args)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_same_v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
                std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;constexpr&lt;/span&gt; (std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;is_same_v&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
                std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
        }, properties[i]);
    } 
}
&lt;span style=&#34;color:#75715e&#34;&gt;// Program stdout
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $ integer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// $ string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How to build Macos Universal Binaries with Conan and CMake</title>
      <link>https://ovaar.github.io/blog/how-to-build-macos-universal-binaries-with-conan-and-cmake/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-build-macos-universal-binaries-with-conan-and-cmake/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary&#34;&gt;Universal Binaries&lt;/a&gt; contain native instructions for multiple target architectures like x86_64 and arm64 to run your app both on Intel Mac and Apple silicon machines. When using Conan there are a few common build systems, or native build tool generators, when creating packages from the Conan Center Index(CCI) like: CMake, Autotools, Pkgconfig, b2 (Boost Build) and Make. Some of these build tools have build-in support when it comes to building Universal Binaries.&lt;/p&gt;
&lt;p&gt;Lets start with some of the easy examples how to enable Universal builds in conan.&lt;/p&gt;
&lt;h3 id=&#34;cmake&#34;&gt;CMake&lt;/h3&gt;
&lt;p&gt;The CMake toolchain generator exposes the &lt;a href=&#34;https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_ARCHITECTURES.html&#34;&gt;CMAKE_OSX_ARCHITECTURES&lt;/a&gt; flag to set the target architectures.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ConanFile
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan.tools.cmake &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CMake, CMakeToolchain, cmake_layout
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan.tools.apple &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; is_apple_os

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PackageConan&lt;/span&gt;(ConanFile):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;(self):
        tc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CMakeToolchain(self)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_apple_os(self):
            tc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blocks[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apple_system&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cmake_osx_architectures&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64;arm64&amp;#34;&lt;/span&gt;
        tc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;autotools&#34;&gt;Autotools&lt;/h3&gt;
&lt;p&gt;Autotools allows you to set the target architectures via &lt;code&gt;extra_cflags&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ConanFile
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan.tools.gnu &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Autotools, AutotoolsToolchain
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; conan.tools.apple &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; is_apple_os

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PackageConan&lt;/span&gt;(ConanFile):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generate&lt;/span&gt;(self):
        tc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AutotoolsToolchain(self)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; is_apple_os(self):
            tc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extra_cflags&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-arch x86_64 -arch arm64&amp;#34;&lt;/span&gt;)
        tc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;other-build-tools&#34;&gt;Other build tools&lt;/h3&gt;
&lt;p&gt;For other build tools that, I am less experienced with or have not found an easy solution for, I wrote a wrapper Conan recipe. This wrapper Conanfile takes the build output of a x86_64 and armv8 package and combines them using &lt;code&gt;lipo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A script writes the hashes of the built packages that will be combined to a json file. When building the &amp;ldquo;universal&amp;rdquo; conan recipe it loads the json files and combines the build output of those two packages, for example &amp;ldquo;arch=x86_64 AND build_type=Release&amp;rdquo; with &amp;ldquo;arch=armv8 AND build_type=Release&amp;rdquo;, in a temporary directory that will be merged with the package_folder once done. The advantage of this approach is that you can update the original recipe from CCI without migrating the universal binaries merge logic to the updated recipe.&lt;/p&gt;
&lt;p&gt;See this &lt;a href=&#34;https://gist.github.com/ovaar/2106071841f1e917f89d10f6d3095638&#34;&gt;Github Gist&lt;/a&gt; for the conanfile template.&lt;/p&gt;
&lt;h3 id=&#34;verifying-universal-binaries-output&#34;&gt;Verifying Universal Binaries output&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cd ~/.conan/data/&amp;lt;packagename&amp;gt;/_/_/package/&amp;lt;hash&amp;gt;/lib
lipo -archs &amp;lt;libname&amp;gt;.a
&lt;span style=&#34;color:#75715e&#34;&gt;# x86_64 arm64&lt;/span&gt;

lipo -archs &amp;lt;libname&amp;gt;.dylib
&lt;span style=&#34;color:#75715e&#34;&gt;# x86_64 arm64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How a smart mirror project finished after years of work</title>
      <link>https://ovaar.github.io/blog/how-a-smart-mirror-project-finished-after-years/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-a-smart-mirror-project-finished-after-years/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Early 2019 I noticed the &lt;a href=&#34;https://magicmirror.builders/&#34;&gt;Magic Mirror&lt;/a&gt; project. To me the way of how woodworking and technology come together really got me. I just had to build one from scratch, ofcourse. It was a great opportunity for me to build something physical and learn a few things about some fancy new JavaScript frontend framework. I decided to call it the &lt;a href=&#34;https://github.com/ovaar/mirrorm8&#34;&gt;mirrorm8&lt;/a&gt; project. I never wrote about it until now.&lt;/p&gt;
&lt;p&gt;Like with many ideas, our inspiration and creativity give birth to others. But as we slowly come back to earth, we realize that with the little time we have there is only so little we can do. Display the weather forecast, upcoming agenda items, voice control, gesture control, facial recognition in order to dynamically switch content per user, real-time traffic- and crypto and stocks &amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;research-fase&#34;&gt;Research fase&lt;/h2&gt;
&lt;p&gt;My first thoughts were to put the mirror in the bathroom, because this is where I would see the device every day. In the morning it could give me all the information for the day. That way I know if I can take my bike to work or on a rainy day the traffic information. My girlfriend and I both value our privacy and a few ideas required image processing. A bathroom and a camera don&amp;rsquo;t go well for us, so a few ideas needed to be taken off the list. Except for one particular idea, which I really wanted to implement. I wanted to have some form of motion or proximity sensing, since I only want the mirror to be on when standing in front of it. Using a camera for motion detection was of the table and infrared (IR) wouldn&amp;rsquo;t work, since most IR waves would be blocked by the glass mirror. Bluetooth (BLE) looked like a good alternative, but this required the users to always bring their smartphone close to the mirror. Perhaps another form or sound? While looking for solutions I stumbled upon the &lt;a href=&#34;https://github.com/jdesbonnet/RCWL-0516&#34;&gt;RCWL-0516&lt;/a&gt;, a doppler radar microwave motion sensor capable of detecting proximity within approximately a range of 5 meters distance.&lt;/p&gt;
&lt;p&gt;I imagined the mirrors&#39; frame to be build out of wood where the display would sink into the frame. This allows the glass to cover the entire front acting as a mirror. For the semi-transparent mirror look I choose to use a spy-mirror film over acrylic class, since it was much cheaper. A Raspberry Pi mounted at the back of the frame would run Mirrorm8 and control the display.&lt;/p&gt;
&lt;h1 id=&#34;development-phase&#34;&gt;Development phase&lt;/h1&gt;
&lt;p&gt;After preparing drawings and double-checking the measurements I got help from a friendly neighbour, who had all the professional tools, to cut wood. I soft grinded the wood for a smooth finish and applied &lt;a href=&#34;https://www.polyvine.be/&#34;&gt;Polyvine verniswas&lt;/a&gt; to darken the wood, which gives the old-wood-looks.&lt;/p&gt;
&lt;p&gt;While I was shopping at a hardware store I found these thin metal interlocking connectors, which are great to mount the mirror close on to the wall. Normally, such brackets are used to mount regular mirrors on the wall. To be able to use them for my mirror I drilled some holes through the brackets and mounted them at the back of the wooden frame with some philips screws.&lt;/p&gt;
&lt;p&gt;23 April 2019 I started and developing the frontend using TypeScript and &lt;a href=&#34;https://nuxtjs.org/&#34;&gt;Nuxt.js&lt;/a&gt;, a based Vue.js frontend framework. 
Using &lt;a href=&#34;https://dietpi.com/&#34;&gt;DietPi&lt;/a&gt; as the Linux image allowed me to easily install dependencies, do backups and receive updates with minimal effort.&lt;/p&gt;
&lt;p&gt;To reduce the software project scope, I decided to include only the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display date and time&lt;/li&gt;
&lt;li&gt;Display the weather forecast&lt;/li&gt;
&lt;li&gt;Display upcoming Google Calandar items&lt;/li&gt;
&lt;li&gt;Dynamically turn on and off the monitor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the time Nuxt.js just recently introduced support for TypeScript, but it was a lacking documentation, examples and a stable API. It was a recipe for disaster really, but that wouldn&amp;rsquo;t stop me! The problem I faced at the time was that I wanted to integrate Socket.io with Nuxt.js in order to receive realtime updates from the backend to the frontend, but Nuxt didn&amp;rsquo;t allow me to extend the expressjs server middleware for an unknown reason. After spending countless hours, I decided to put the project on ice for a little while until the Nuxt.js TypeScript was more stable.&lt;/p&gt;
&lt;p&gt;Just around the summer of August 2020, in my holidays, Nuxt.js released a stable version of @nuxt/typescript-runtime v1.0.0, allowing me to succesfully build the Mirrorm8 project with the desired serverMiddleware &lt;a href=&#34;https://github.com/ovaar/mirrorm8/commit/b019c94de2d44afebc33e372c523a3f1f6592fdd&#34;&gt;b019c94&lt;/a&gt;. Finally! I rapidly finished automatically updating the weather forecast, upcoming Google Calendar items, date time and turning on/off the display dynamically using the RCWL-0516 proximity sensor afterwards.&lt;/p&gt;
&lt;h1 id=&#34;validation-phase&#34;&gt;Validation phase&lt;/h1&gt;
&lt;p&gt;Most of the developement could be done on a regular working station, but because of the Proximity sensor few functions needed to be tested on the hardware. Because mirrorm8 uses native dependencies it was easiest to be build the project on the target itself. The iterations were slow, because each time building the project took about 15 minutes. Luckly all of these steps I automated. At boot DietPi automatically starts the mirrorm8 systemd service and loads the URL with Chromium in kiosk mode. Unfortunately, my calendar items were not showing when running Mirrorm8 on the Raspberri Pi. Though, this worked just find on my work station. It turns out that Google OAuth2 is unsupported in the open-source &lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt; browser. To fix it I replaced Google OAuth2 with a &lt;a href=&#34;https://docs.simplecalendar.io/google-api-key/&#34;&gt;Google API key&lt;/a&gt; instead.&lt;/p&gt;
&lt;h4 id=&#34;gallery&#34;&gt;Gallery&lt;/h4&gt;
&lt;p&gt;&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG_20190609_171025_hu072b19bd1b7417dbd7d12ab898ca9750_3335767_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG_20190609_171025_hu072b19bd1b7417dbd7d12ab898ca9750_3335767_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG_20190609_171025_hu072b19bd1b7417dbd7d12ab898ca9750_3335767_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG_20190609_171025.jpg&#34;
  alt=&#34;Mirrorm8 - Wooden frame pieces&#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Wooden frame pieces&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG_20190610_113928_hu4d0c80007d541926d094738d83ee00f2_3162232_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG_20190610_113928_hu4d0c80007d541926d094738d83ee00f2_3162232_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG_20190610_113928_hu4d0c80007d541926d094738d83ee00f2_3162232_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG_20190610_113928.jpg&#34;
  alt=&#34;Mirrorm8 - Wooden frame assembled front&#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Wooden frame assembled front&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG_20200423_225011_hu2d6ea7d7123e7de7ca420da059a3e988_3077641_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG_20200423_225011_hu2d6ea7d7123e7de7ca420da059a3e988_3077641_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG_20200423_225011_hu2d6ea7d7123e7de7ca420da059a3e988_3077641_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG_20200423_225011.jpg&#34;
  alt=&#34;Mirrorm8 - Wooden frame assembled back&#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Wooden frame assembled back&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG-20200423-WA0021_hu8ba62fbda03d17317b76ec26467ef6ad_1603421_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG-20200423-WA0021_hu8ba62fbda03d17317b76ec26467ef6ad_1603421_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG-20200423-WA0021_hu8ba62fbda03d17317b76ec26467ef6ad_1603421_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG-20200423-WA0021.jpg&#34;
  alt=&#34;Mirrorm8 - Spy film glas&#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Spy film glas&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG_20200720_190254_hu64c3adc61bcb95b801b219e4385efa6d_2829106_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG_20200720_190254_hu64c3adc61bcb95b801b219e4385efa6d_2829106_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG_20200720_190254_hu64c3adc61bcb95b801b219e4385efa6d_2829106_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG_20200720_190254.jpg&#34;
  alt=&#34;Mirrorm8 - Chromium restore pages&#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Chromium restore pages&lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;
&lt;div class=&#34;center&#34;&gt;
&lt;figure&gt;
&lt;img sizes=&#34;(min-width: 35em) 720px, 100vw&#34; 
  srcset=&#39;https://ovaar.github.io/img/IMG_20211228_141034_hua4dbb07c34c16553504690b80b40c37a_3864203_500x0_resize_q75_box.jpg 500w, https://ovaar.github.io/img/IMG_20211228_141034_hua4dbb07c34c16553504690b80b40c37a_3864203_800x0_resize_q75_box.jpg 800w, https://ovaar.github.io/img/IMG_20211228_141034_hua4dbb07c34c16553504690b80b40c37a_3864203_1200x0_resize_q75_box.jpg 1200w&#39;
  src=&#34;https://ovaar.github.io/img/IMG_20211228_141034.jpg&#34;
  alt=&#34;Mirrorm8 - Fully assembled &#34;&gt;
&lt;figcaption&gt;Mirrorm8 - Fully assembled &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h4 id=&#34;bill-of-material&#34;&gt;Bill of material&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Items&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;28&amp;quot; TFT monitor&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€70,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Glass&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€20,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Glass Film&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€12,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wood&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€15,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raspberry pi 3&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€40,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RCWL-0516&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€3,31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Breadboard&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€4,50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Glass clips&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€2,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sandisk Ultra Fit 4GB&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€23,80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lsquo;Blind&amp;rsquo; mirror wall mount&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€12,00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;€202,61&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;reflection&#34;&gt;Reflection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Applying mirror foil is hard, because it leaves wrinkles. I recommend acrylic glass.&lt;/li&gt;
&lt;li&gt;I learned how to oil wood.&lt;/li&gt;
&lt;li&gt;Choosing new technology is risk full.&lt;/li&gt;
&lt;li&gt;Nuxt.js with TypeScript is great for productivity.&lt;/li&gt;
&lt;li&gt;vuex-class is great for separation of concerns.&lt;/li&gt;
&lt;li&gt;Google does not allow OAuth2 authentication from the open-source Chromium browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Say, I would need to do it all over I would separate the server-side logic from the client. For example, I would rather use the MQTT protocol to notify Mirrorm8, as a client, to receive messages and update the frontend with new data automatically.&lt;/p&gt;
&lt;p&gt;Looking back, I really enjoyed doing this project and I hope you also liked to read about my journey.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C# Performance - Profiling introduction</title>
      <link>https://ovaar.github.io/blog/csharp-performance-profiling-introduction/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/csharp-performance-profiling-introduction/</guid>
      <description>&lt;p&gt;Welcome! In this blog series I will share some of the knowledge I gained when doing performance optimizations for a project some time ago. Optimizing code for performance requires good knowledge of the fundamental concepts of computer architecture. In this first blog post I will explain about software profiling, some of the computer architecture concepts and my personal experience what worked for my and what did not. In later post(s) I will go more into detail in how to optimize code for performance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media1.tenor.com/images/9a8cd260ef1cc7f1544c65530966ee93/tenor.gif?itemid=5593963&#34; alt=&#34;high performance&#34;&gt;&lt;/p&gt;
&lt;p&gt;About a year ago I was challenged to improve the overall application performance of a C# WPF application. The application was built for a steel plate inspection system. Using ultrasound, the system is capable of detecting defects in steel plates. For your imagination, these steel plate could go up to 40 by 5 meters (pretty huge). One of the main functions of the application is to receive and parse streams of data which were send by an FPGA via TCP. After parsing the characteristics of a &amp;ldquo;shot&amp;rdquo; were being calculated and a 3D model of the steel plate is updated and displayed in near real-time.&lt;/p&gt;
&lt;p&gt;When I joined this project, it was already running for about two years and the first prototype was built. This machine contained 1 FPGA and a single transceiver probe. At that time there were already signs of performance issues. But before we could start improving the software, we had to polish the existing application for its first customer. Because of time pressure the machine needed to be sold and the next generation had to be built as well. This next generation machine contained 20 FPGA&amp;rsquo;s and 80 transceiver probes. These requirements were getting more serious but theoretically this would not be a problem.&lt;/p&gt;
&lt;p&gt;Some time went by and more and more code were added, the customers wishes changed, the principal system architect left the project and no replacement was ever found. Engineers with different ideas have come and gone. The &amp;ldquo;legacy&amp;rdquo; code base was dying to get an update! I remember when connecting more than a single FPGA device the software would completely freeze the computer. We were hitting a wall! The software architecture was not scalable at all&amp;hellip;&lt;/p&gt;
&lt;p&gt;You might have found yourself in such a situation. When experiencing performance issues, you will find yourself very quickly in a new world with software profilers. Profilers such as the one embedded in Microsoft Visual Studio, &lt;a href=&#34;https://software.intel.com/content/www/us/en/develop/tools/vtune-profiler.html&#34;&gt;Intel VTune Profiler&lt;/a&gt;, Reshaper tools such as &lt;a href=&#34;https://www.jetbrains.com/profiler/&#34;&gt;dotTrace&lt;/a&gt; or &lt;a href=&#34;https://www.jetbrains.com/dotmemory/&#34;&gt;dotMemory&lt;/a&gt;.&lt;/p&gt;
&lt;br /&gt;
&lt;h3 id=&#34;profiling&#34;&gt;Profiling&lt;/h3&gt;
&lt;p&gt;Software profiling is about getting metrics/samples about the application or system-wide used resources like CPU, RAM or GPU. These metrics can give insight in how fast code is executed, what memory is being allocated, how well the code is being executed in parallel, etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;Sampling can be done in two different ways: User mode Sampling and Hardware Event-Base Sampling (Interrupt). In order to use User Mode sampling the profiling application has to inject and recompile the program in order to get the application metrics. Using this method, the metrics will be time based and acquiring these metrics has about 5% overhead on the overall system performance.&lt;/p&gt;
&lt;p&gt;On the other hand, Hardware Event-Based Sampling uses the PMU. Every modern CPU nowadays contains a Performance Monitoring Unit (PMU). The PMU can sample data per number of cpu-cycles or can be triggered when a specific instruction is executed. Since this is hardware embedded on the CPU it is able capture metrics of the whole system. and it has a minimal performance overhead.&lt;/p&gt;
&lt;p&gt;Below a small comparison table between these two sampling methods.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;User mode Sampling&lt;/th&gt;
&lt;th&gt;Hardware Event-Based Sampling&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Time-Based Sampling (TBS)&lt;/td&gt;
&lt;td&gt;Performance Monitoring Unit (PMU)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~5% overhead&lt;/td&gt;
&lt;td&gt;Minimum overhead&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Application resources only&lt;/td&gt;
&lt;td&gt;System-wide resources&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inject code into binary&lt;/td&gt;
&lt;td&gt;Uses system interrupts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br /&gt;
&lt;h4 id=&#34;hotspots&#34;&gt;Hotspots&lt;/h4&gt;
&lt;p&gt;Code &amp;ldquo;hotspots&amp;rdquo; refer to functions in the call stack which are executed very often. Reducing the execution time or the amount of times executing the operation can result in faster overall execution time of your program, by making room for other operations.&lt;/p&gt;
&lt;p&gt;When it comes to finding these hotspots, I personally prefer using Intel VTune Profiler&amp;rsquo;s &lt;em&gt;Hotspot analysis&lt;/em&gt;. Intel VTune has a clear overview, visualizing the top hotspots and allowing the user to easily traverse the call stack.&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id=&#34;memory-allocation&#34;&gt;Memory Allocation&lt;/h4&gt;
&lt;p&gt;Allocating new memory reserves a block of memory on the stack, heap or virtual memory. Both the stack and heap are physically located in RAM (Random Access Memory). If you are new to the concepts stack or heap or just looking for a refresher; The stack is a fixed size block of memory reserved for the execution of a thread. In processes each thread has its own stack. A stack is a LIFO (last in first out) and consists of stack frames. On each function call a new stack frame, containing local variables, is added. When a function exits the stack frame is &lt;code&gt;popped&lt;/code&gt; from the stack, releasing the allocated memory automatically. Due to the fixed size of the stack it is possible to run out of memory, this results in a StackOverflow Exception. The stack size is determined at application startup and depends on the system architecture and operating system.&lt;/p&gt;
&lt;p&gt;The heap is memory reserved space for dynamic memory allocations. Dynamic allocations have a different lifecycle that needs to be managed by the application runtime. This can be manually where the program needs to explicitly free the memory by using &lt;code&gt;free&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; or by a Garbage Collector, like in .NET. Unlike the stack that can throw an exception when it overflows, the heap is able to also make use of virtual memory. Virtual memory is memory that can be located on a hard disk, which has considerably slower access times than reading from RAM (latency). The process of running out of RAM memory and making use of virtual memory is called &lt;em&gt;swapping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To put the latency numbers in perspective.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Latency Comparison Numbers (~2012)
----------------------------------
L1 cache reference                           0.5 ns
Branch mispredict                            5   ns
L2 cache reference                           7   ns                      14x L1 cache
Mutex lock/unlock                           25   ns
Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy             3,000   ns        3 us
Send 1K bytes over 1 Gbps network       10,000   ns       10 us
Read 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Round trip within same datacenter      500,000   ns      500 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip
Read 1 MB sequentially from disk    20,000,000   ns   20,000 us   20 ms  80x memory, 20X SSD
Send packet CA-&amp;gt;Netherlands-&amp;gt;CA    150,000,000   ns  150,000 us  150 ms

Notes
-----
1 ns = 10^-9 seconds
1 us = 10^-6 seconds = 1,000 ns
1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns

Credit
------
By Jeff Dean:               http://research.google.com/people/jeff/
Originally by Peter Norvig: http://norvig.com/21-days.html#answers

Contributions
-------------
&#39;Humanized&#39; comparison:  https://gist.github.com/hellerbarde/2843375
Visual comparison chart: http://i.imgur.com/k0t1e.png
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Allocating memory on the stack is faster than on the heap. This is due to that each allocation on the heap requires searching for a block which is big enough to fit the data in or even splitting the data over multiple blocks while guaranteeing thread-safety.&lt;/p&gt;
&lt;p&gt;When profiling for memory allocations I found that Resharper dotTrace works for me best. Here is why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clear overview of total memory usage within the profile snapshot.&lt;/li&gt;
&lt;li&gt;Allows filtering by memory type.&lt;/li&gt;
&lt;li&gt;Allows filtering of memory allocations within a selected timeline.&lt;/li&gt;
&lt;li&gt;Allows filtering of memory allocations per thread.&lt;/li&gt;
&lt;li&gt;Visually shows Garbage Collector run time.&lt;/li&gt;
&lt;li&gt;Visually shows UI freezes due to excessive memory traffic and Garbage Collections, blocking the main thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://resources.jetbrains.com/help/img/dotnet/2020.2/memory_allocation_type.png&#34; alt=&#34;memory allocation type&#34;&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id=&#34;microarchitecture&#34;&gt;Microarchitecture&lt;/h4&gt;
&lt;p&gt;The CPU contains allot of optimizations to maximize the performance. Examples of these feature are caching and branch prediction. Even when the CPU facilitates optimizations, they can also work against you, so being aware of how the CPU works is essential when writing good code. I recommend watching this video; &lt;a href=&#34;https://www.infoq.com/presentations/microarchitecture-modern-cpu/&#34;&gt;Understanding CPU Microarchitecture to Increase Performance&lt;/a&gt;, where Alex Blewitt talks about: the CPU layout, caching, the memory layout, execution units and scheduling.&lt;/p&gt;
&lt;p&gt;While on average branch prediction is about 95% of the times right, it can become expensive. Writing branch-free code would eliminate branches predication completely but this is not achievable for all software. Daniel Lemire wrote an excellent article about removing branches: &lt;a href=&#34;https://www.infoq.com/articles/making-code-faster-taming-branches/&#34;&gt;Making Your Code Faster by Taming Branches&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Intel VTune Profiler offers great insight in the Microarchitecture bottlenecks of your system processes or a single application. It gives insight in:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code that causes memory stalls because of inefficient reads or writes (hot memory access)&lt;/li&gt;
&lt;li&gt;Code which is delayed because of longer memory read/write latency due to the memory being stored in an older memory cache generation (L1, L2, L3 or in RAM).&lt;/li&gt;
&lt;li&gt;Branch mispredictions&lt;/li&gt;
&lt;li&gt;Availability of Pipeline execution slots&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;threading-efficiency&#34;&gt;Threading Efficiency&lt;/h4&gt;
&lt;p&gt;Each process has its own resources in order to execute a program such as; virtual address space, executable code, open handles to system objects, a security context, a unique process identifier, environment variables, a priority class, minimum and maximum working set sizes, and at least one thread of execution. The first thread is often called &lt;em&gt;primary thread&lt;/em&gt; or &lt;em&gt;main thread&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A thread, linked to a process, can be scheduled for execution. Each thread shares the virtual address space and system resources of a process. In addition, each thread maintains exception handlers, a scheduling priority, thread local storage, a unique thread identifier, and a set of structures the system will use to save the thread context until it is scheduled. The thread context includes the thread&amp;rsquo;s set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread&amp;rsquo;s process. Threads can also have their own security context, which can be used for impersonating clients.&lt;/p&gt;
&lt;p&gt;Multiprocessors computers can execute in parallel as many threads as there are processors. A part of the kernel called the &lt;em&gt;scheduler&lt;/em&gt; manages the threads when they are executed as well as the amount of time they have to execute (timeslice or quantum). The scheduler is basically a load balancer to keep all computer resources busy. When the scheduler switches between threads there is overhead due to booking, this is called &lt;em&gt;context switching&lt;/em&gt;. Ideally you would want to limit the amount of threads to the amount of CPU cores in your program to maximize performance by reducing context switching. This sounds like a perfect solution, but there will always be context switches due to other running processes on the operating system. It is hard to put a number on what the costs are of context switching. In general, the cost of context switch ranges from several microseconds to more than one thousand microseconds depending on CPU architecture and program cache sizes.&lt;/p&gt;
&lt;p&gt;All threads can access and modify data on the heap. If multiple threads access the same resource and at least one of them will be writing, you need to protect the critical section. To achieve thread-safeness you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Confinement: don’t share data between threads.&lt;/li&gt;
&lt;li&gt;Immutability: make the shared data immutable.&lt;/li&gt;
&lt;li&gt;Use existing thread safe data types: use a data type that does the coordination for you.&lt;/li&gt;
&lt;li&gt;Synchronization; prevent threads from accessing the shared data at the same time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking back at &lt;a href=&#34;#memory-allocation&#34;&gt;Memory Allocation&lt;/a&gt;, we know that the .NET Garbage Collector(GC) automatically searches for resources which can be released. Now, take threading into the equation with the GC; Heap resources are shared by all threads and shared resources need protected when accessing them. Say if many objects with a small lifetime are being allocated, the GC will need more time to release those resources, resulting in all other threads being blocked by the GC. Eventually, stressing the GC can result in a snowball effect that can be experienced by UI Freezes, where the operating system temporary seems to be unresponsive.&lt;/p&gt;
&lt;p&gt;Threading efficiency boils down to the amount of time threads must wait for synchronization due to the amount of executions by a thread inside a critical section of a shared resource, resulting in bad CPU utilization. Parallel performance suffers when waits occur while cores are under-utilized.&lt;/p&gt;
&lt;p&gt;For me Intel VTune Profiler&amp;rsquo;s Threading Analysis helped to analyze thread wait time and find synchronization bottlenecks best, while Resharper DotTrace had a better overview of the allocated memory, UI Freezes combined with the time in GC.&lt;/p&gt;
&lt;p&gt;Even though there is no straightforward answer to every problem, problems tend to have things in common. In my next performance post, we will visit some of these common issues including examples and solutions.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this long read, until next time!&lt;br&gt;
Thomas&lt;/p&gt;
&lt;br /&gt;
&lt;h4 id=&#34;resoures&#34;&gt;Resoures&lt;/h4&gt;
&lt;p&gt;Even more details can be found in the following pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/microarchitecture-modern-cpu/&#34;&gt;Understanding CPU Microarchitecture to Increase Performance - Alex Blewitt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/making-code-faster-taming-branches/&#34;&gt;Making Your Code Faster by Taming Branches - Daniel Lemire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/jboner/2841832&#34;&gt;Latency Comparison Numbers (~2012) - Jonas Bonér&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-gb/windows/win32/procthread/about-processes-and-threads&#34;&gt;About Processes and Threads - Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/events/expcs07/papers/2-li.pdf&#34;&gt;Quantifying The Cost of Context Switch - Chuanpeng Li, Chen Ding, Kai Shen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.mit.edu/6.005/www/fa15/classes/23-locks/&#34;&gt;Reading 23: Locks and Synchronization - MIT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reactive testing with Gherkin, ReactiveX and asyncio</title>
      <link>https://ovaar.github.io/blog/reactive-testing-with-gherkin-reactivex-and-asyncio/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/reactive-testing-with-gherkin-reactivex-and-asyncio/</guid>
      <description>&lt;p&gt;Have you ever written integration test with asynchronous behavior? I have, and it has always been a struggle&amp;hellip; CI/CD pipelines which regularly fail because of some timeout. Then, &amp;ldquo;a wild project manager appears!&amp;rdquo;, and starts asking questions why investigating takes so long&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Solution: The timeout is increased to quickly solve the issue, when usually the failure is caused by regression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There must be some more elegant way to assert or await asynchronous calls in Behavior Driven Development (BDD) steps.&lt;/p&gt;
&lt;p&gt;I am excited, enjoy what&amp;rsquo;s coming next! I developed a more comfortable way to add asynchronous assertions in integration tests without adding &lt;code&gt;time.sleep(n)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TLDR;
This post is about practical use of combining RxPy, pytest, Gherkin, asyncio with automated testing using Python and not an introduction of the previously described libraries. Regardless of using Python I believe this test strategy can be reused with any other programming language supported by ReactiveX. The application sources can be found on &lt;a href=&#34;https://github.com/ovaar/reactive-testing&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break it down, but before I do I would like to set the scene for the demo application with the following use case.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use case: I have a central lighting system where lights can connect to and as a user I want to be able to turn on and off the lights.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To only focus on the testing part, we will abstract the lighting hardware using a simulator and assume the lights are able to communicate via the MQTT protocol. Let&amp;rsquo;s begin with looking at how the Gherkin test Feature is described which will be used in order to execute the test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-gherkin&#34; data-lang=&#34;gherkin&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lighting\integration_tests\tests\features\lighting.feature&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Feature:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; The lights must be able to be turned on and off
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Scenario:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; The lights are controlled
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;        Given &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;I have a light with the id &lt;/span&gt;&amp;lt;light_id&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the light &lt;/span&gt;&amp;lt;light_id&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; is turned &lt;/span&gt;&amp;lt;light_begin_state&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;I expect the final state of light &lt;/span&gt;&amp;lt;light_id&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; to be &lt;/span&gt;&amp;lt;light_final_state&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the lights are connected
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;I use &lt;/span&gt;&amp;lt;light_function&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; to control the lights
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;I await the result
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Examples:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; Vertical&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;            |&lt;/span&gt; light_id&lt;span style=&#34;color:#66d9ef&#34;&gt;          |&lt;/span&gt; lightbulb-1&lt;span style=&#34;color:#66d9ef&#34;&gt; |&lt;/span&gt; lightbulb-2&lt;span style=&#34;color:#66d9ef&#34;&gt; |&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;            |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; light_begin_state&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt; |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; OFF&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;         |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ON&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;          |&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;            |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; light_function&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;    |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; on&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;          |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; off&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;         |&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;            |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; light_final_state&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt; |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ON&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;          |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; OFF&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;         |
&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test consists of three stage. In some way it like a Unit Test it uses Arrange / Act / Assert (AAA). In the first stage an object is build containing the initial stage for the simulator as well as setting up the the ReactiveX Observables in order to receive new states via a Mqtt Client. The ReactiveX Observables you could compare to adding a &lt;code&gt;spy&lt;/code&gt; to a method in order to check if it was called. This must be done before executing the test so that we will not miss any events.&lt;/p&gt;
&lt;p&gt;The second stage adds Lightbulb Simulators to the &lt;code&gt;TestContext&lt;/code&gt; and connects them to the MQTT broker. The simulator publishes the topic &lt;code&gt;lights/connect/$lightId&lt;/code&gt; to register itself with the &lt;code&gt;core&lt;/code&gt; module. Then the connected lights can be controlled by sending an MQTT message to topic &lt;code&gt;lights/function/on&lt;/code&gt; or &lt;code&gt;lights/function/off&lt;/code&gt;. The &lt;code&gt;core&lt;/code&gt; will publish an individual topic for each simulated Lightbulb. Below you see the &lt;code&gt;Lightbulb&lt;/code&gt; data holder class. In order to understand the last BDD step &lt;code&gt;And I await the result&lt;/code&gt; I have to first explain about how &lt;code&gt;rx.subject&lt;/code&gt; works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lighting\integration_tests\tests\data.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dict, Optional
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rx.subject &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; RxSubject


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Lightbulb&lt;/span&gt;(object):
    uuid: str
    state: Optional[str] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
    light_state: RxSubject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Subject

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, uuid: str):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uuid
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RxSubject&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Subject()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;complete&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on_completed()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The class &lt;code&gt;rx.Subject&lt;/code&gt; inherits from &lt;code&gt;rx.core.Observable&lt;/code&gt; and &lt;code&gt;rx.core.Observer&lt;/code&gt;. The class &lt;code&gt;rx.Subject&lt;/code&gt; allows you to push data into the Rx Operators using the &lt;code&gt;rx.core.Observable&lt;/code&gt; interface. When a new state is received via the topic: &lt;code&gt;lights/{lightbulbId/state&lt;/code&gt;, then the &lt;code&gt;light_state.on_next(...)&lt;/code&gt; is called which pipes the data to the &lt;code&gt;rx.operators&lt;/code&gt;. ReactiveX operators are basically predicate functions which will evaluate the observable state with every element added to the sequence. I use &lt;a href=&#34;http://reactivex.io/documentation/operators/takewhile.html&#34;&gt;rx.operators.take_while&lt;/a&gt; to evaluate if the state of the lightbulb equals the expected &lt;code&gt;light_final_state&lt;/code&gt;. The &lt;code&gt;take_while&lt;/code&gt; Operator will automatically call on_complete if predicate function returns &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lighting\integration_tests\tests\steps\lights.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; rx.operators &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; RxOp
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; rx &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Observable &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; RxObservable
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; rx.scheduler.eventloop &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AsyncIOScheduler

&lt;span style=&#34;color:#a6e22e&#34;&gt;@given&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I expect the final state of light &amp;lt;light_id&amp;gt; to be &amp;lt;light_final_state&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;light_state_equals&lt;/span&gt;(light_id: str,
                       light_final_state: str,
                       test_context: Data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestContext,
                       loop: asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AbstractEventLoop,
                       awaitables: List[RxObservable]):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(light_id, str)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(light_final_state, str)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;take_while_state&lt;/span&gt;(payload: Structs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s_lights_state) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; bool:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; payload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newState &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; light_final_state

    timeout_sec &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the lightbulb by id from the test context fixture&lt;/span&gt;
    lightbulb: Data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Lightbulb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test_context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lightbulbs[light_id]

	&lt;span style=&#34;color:#75715e&#34;&gt;# Rx .pipe returns a new observable&lt;/span&gt;
    observable: RxObservable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lightbulb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;light_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pipe(
    	&lt;span style=&#34;color:#75715e&#34;&gt;# Add a default timeout for the test to fail if no data is received&lt;/span&gt;
        RxOp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timeout(timeout_sec),
        &lt;span style=&#34;color:#75715e&#34;&gt;# Add the AsyncIOScheduler to be able to asynchronously re-evaluate&lt;/span&gt;
    	&lt;span style=&#34;color:#75715e&#34;&gt;# the state of the RxObserable for changes&lt;/span&gt;
        RxOp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;observe_on(scheduler&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AsyncIOScheduler(loop)),
        &lt;span style=&#34;color:#75715e&#34;&gt;# Add data to the RxObservable sequence while the predicate function&lt;/span&gt;
    	&lt;span style=&#34;color:#75715e&#34;&gt;# returns True. If it returns False the RxObservable is automatically&lt;/span&gt;
    	&lt;span style=&#34;color:#75715e&#34;&gt;# completed and it includes the last result.&lt;/span&gt;
        RxOp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take_while(take_while_state, inclusive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
    )

    observable&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subscribe(
        on_next&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; i: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on_next: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
        on_error&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; e: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on_error: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
        on_completed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;on_completed&amp;#34;&lt;/span&gt;),
        scheduler&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AsyncIOScheduler(loop)
    )

    awaitables&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(observable)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, the last step &lt;code&gt;And I await the result&lt;/code&gt; from the file &lt;code&gt;lighting.feature&lt;/code&gt; uses Asyncio to asynchronously await the ReactiveX Observables which were added to the &lt;code&gt;awaitables&lt;/code&gt; list. The &lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.gather&#34;&gt;asyncio.gather&lt;/a&gt; function will await for all results to be completed. Wrapping the &lt;code&gt;asyncio.gather&lt;/code&gt; in a &lt;code&gt;main&lt;/code&gt; function and executing it on the asyncio event loop using &lt;code&gt;loop.run_until_complete(main())&lt;/code&gt; will block until all have been completed successfully or an exception is thrown.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lighting\integration_tests\tests\steps\lights.py&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@then&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;I await the result&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;await_the_result&lt;/span&gt;(awaitables: List[RxObservable], loop: asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AbstractEventLoop):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(awaitables) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nothing to await, continuing... &amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Awaiting tasks, count=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(awaitables)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gather(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;awaitables)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;start: run_until_complete&amp;#39;&lt;/span&gt;)
        loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_until_complete(main())
        awaitables&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        awaitables&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clear()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is all! I hope I inspired you or gave you some insight in how to approach asynchronous assertions in testing software. For the ones who are curious about the test output, have a look below.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;lighting-integration-tests_1  | ============================= test session starts ==============================
lighting-integration-tests_1  | platform linux -- Python 3.8.2, pytest-6.0.1, py-1.9.0, pluggy-0.13.1 -- /usr/bin/python3
lighting-integration-tests_1  | cachedir: .pytest_cache
lighting-integration-tests_1  | rootdir: /lighting/integration_tests
lighting-integration-tests_1  | plugins: bdd-3.3.0
lighting-integration-tests_1  | collecting ... collected 2 items
lighting-integration-tests_1  |
lighting-integration-tests_1  | tests/main.py::test_turn_on_the_lights[lightbulb-1-OFF-on-ON] pytest::before &amp;lt;Function test_turn_on_the_lights[lightbulb-1-OFF-on-ON]&amp;gt;
lighting-integration-tests_1  | Scenario::before: The lights are controlled
lighting-integration-tests_1  | create: loop
lighting-integration-tests_1  | create: awaitables
lighting-integration-tests_1  | PASSED Step: I have a light with the id &amp;lt;light_id&amp;gt;
lighting-integration-tests_1  | PASSED Step: the light &amp;lt;light_id&amp;gt; is turned &amp;lt;light_begin_state&amp;gt;ReactiveListener::on_connect Connected with result code 0
lighting-integration-tests_1  |
lighting-integration-tests_1  | PASSED Step: I expect the final state of light &amp;lt;light_id&amp;gt; to be &amp;lt;light_final_state&amp;gt;
lighting-integration-tests_1  | create: simulator
lighting-integration-tests_1  | LightbulbSimulator::connect_as lightbulb-1 to localhost:1883
lighting-integration-tests_1  | LightbulbSimulator::on_connect Lightbulb=lightbulb-1 connected
lighting-integration-tests_1  | LightbulbSimulator::on_message topic=lights/lightbulb-1/state/get payload=b&#39;&#39;
lighting-integration-tests_1  | LightbulbSimulator::on_message public topic=lights/lightbulb-1/state payload=s_lights_state(newState=&#39;OFF&#39;)
lighting-integration-tests_1  | ReactiveListener::on_message topic=lights/lightbulb-1/state payload=b&#39;{&amp;quot;newState&amp;quot;: &amp;quot;OFF&amp;quot;}&#39;
lighting-integration-tests_1  | on_next: s_lights_state(newState=&#39;OFF&#39;)
lighting-integration-tests_1  | PASSED Step: the lights are connected
lighting-integration-tests_1  | PASSED Step: I use &amp;lt;light_function&amp;gt; to control the lights
lighting-integration-tests_1  | Awaiting tasks, count=1
lighting-integration-tests_1  | start: run_until_complete
lighting-integration-tests_1  | LightbulbSimulator::on_message topic=lights/lightbulb-1/function/on payload=b&#39;&#39;
lighting-integration-tests_1  | LightbulbSimulator::on_message public topic=lights/lightbulb-1/state payload=s_lights_state(newState=&#39;ON&#39;)
lighting-integration-tests_1  | ReactiveListener::on_message topic=lights/lightbulb-1/state payload=b&#39;{&amp;quot;newState&amp;quot;: &amp;quot;ON&amp;quot;}&#39;
lighting-integration-tests_1  | on_next: s_lights_state(newState=&#39;ON&#39;)
lighting-integration-tests_1  | on_completed
lighting-integration-tests_1  | PASSED Step: I await the result
lighting-integration-tests_1  | PASSEDpytest::after &amp;lt;Function test_turn_on_the_lights[lightbulb-1-OFF-on-ON]&amp;gt;
lighting-integration-tests_1  | after: awaitables
lighting-integration-tests_1  |
lighting-integration-tests_1  | tests/main.py::test_turn_on_the_lights[lightbulb-2-ON-off-OFF] pytest::before &amp;lt;Function test_turn_on_the_lights[lightbulb-2-ON-off-OFF]&amp;gt;
lighting-integration-tests_1  | Scenario::before: The lights are controlled
lighting-integration-tests_1  | create: awaitables
lighting-integration-tests_1  | PASSED Step: I have a light with the id &amp;lt;light_id&amp;gt;
lighting-integration-tests_1  | PASSED Step: the light &amp;lt;light_id&amp;gt; is turned &amp;lt;light_begin_state&amp;gt;
lighting-integration-tests_1  | PASSED Step: I expect the final state of light &amp;lt;light_id&amp;gt; to be &amp;lt;light_final_state&amp;gt;
lighting-integration-tests_1  | create: simulator
lighting-integration-tests_1  | LightbulbSimulator::connect_as lightbulb-2 to localhost:1883
lighting-integration-tests_1  | LightbulbSimulator::on_connect Lightbulb=lightbulb-2 connected
lighting-integration-tests_1  | LightbulbSimulator::on_message topic=lights/lightbulb-2/state/get payload=b&#39;&#39;
lighting-integration-tests_1  | LightbulbSimulator::on_message public topic=lights/lightbulb-2/state payload=s_lights_state(newState=&#39;ON&#39;)
lighting-integration-tests_1  | ReactiveListener::on_message topic=lights/lightbulb-2/state payload=b&#39;{&amp;quot;newState&amp;quot;: &amp;quot;ON&amp;quot;}&#39;
lighting-integration-tests_1  | on_next: s_lights_state(newState=&#39;ON&#39;)
lighting-integration-tests_1  | PASSED Step: the lights are connected
lighting-integration-tests_1  | PASSED Step: I use &amp;lt;light_function&amp;gt; to control the lights
lighting-integration-tests_1  | Awaiting tasks, count=1
lighting-integration-tests_1  | start: run_until_complete
lighting-integration-tests_1  | LightbulbSimulator::on_message topic=lights/lightbulb-2/function/off payload=b&#39;&#39;
lighting-integration-tests_1  | LightbulbSimulator::on_message public topic=lights/lightbulb-2/state payload=s_lights_state(newState=&#39;OFF&#39;)
lighting-integration-tests_1  | ReactiveListener::on_message topic=lights/lightbulb-2/state payload=b&#39;{&amp;quot;newState&amp;quot;: &amp;quot;OFF&amp;quot;}&#39;
lighting-integration-tests_1  | on_next: s_lights_state(newState=&#39;OFF&#39;)
lighting-integration-tests_1  | on_completed
lighting-integration-tests_1  | PASSED Step: I await the result
lighting-integration-tests_1  | PASSEDpytest::after &amp;lt;Function test_turn_on_the_lights[lightbulb-2-ON-off-OFF]&amp;gt;
lighting-integration-tests_1  | after: awaitables
lighting-integration-tests_1  | exit: loop
lighting-integration-tests_1  |
lighting-integration-tests_1  |
lighting-integration-tests_1  | ============================== 2 passed in 22.08s ==============================
reactive-testing_lighting-integration-tests_1 exited with code 0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>How to setup docker credential-store</title>
      <link>https://ovaar.github.io/blog/how-to-setup-docker-credential-store/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-setup-docker-credential-store/</guid>
      <description>&lt;p&gt;Since docker version 19 it start notifying the user that the docker credentials are stored unencrypted.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WARNING! Your password will be stored unencrypted …
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To solve this we will use the Docker &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/login/#credentials-store&#34;&gt;credential-store&lt;/a&gt; feature.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu: &lt;a href=&#34;https://github.com/docker/docker-credential-helpers/releases/latest&#34;&gt;docker-credential-pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OSX: osxkeychain&lt;/li&gt;
&lt;li&gt;Windows: wincred&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this blog post we are going to use install the latest docker-credential-pass helper in combination with pass as a store and gpg for key generation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt-get install -y pass gpg
gpg2 --gen-key
&lt;span style=&#34;color:#75715e&#34;&gt;# copy gpg-key&lt;/span&gt;
pass init &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;gpg-pub-key&amp;gt;&amp;#34;&lt;/span&gt;

sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0,/{/s/{/{\n\t&amp;#34;credsStore&amp;#34;: &amp;#34;pass&amp;#34;,/&amp;#39;&lt;/span&gt; ~/.docker/config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following one-line will download the latest &lt;code&gt;docker-credential-pass&lt;/code&gt; helper from github and extract it to the &lt;code&gt;~/bin&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -fsSLI -o /dev/null -w %&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;url_effective&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; https://api.github.com/repos/docker/docker-credential-helpers/releases/latest | xargs curl -s | grep -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https.*docker-credential-pass.*tar.gz&amp;#34;&lt;/span&gt; | wget -qi - &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p ~/bin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xvf docker-credential-pass-v*-amd64.tar.gz -C ~/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, login with your docker credentials.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How to set Linux MAC address</title>
      <link>https://ovaar.github.io/blog/how-to-set-linux-mac-address/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-set-linux-mac-address/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ovaar.github.io/blog/how-to-create-an-interactive-yocto-shell/&#34;&gt;Last post&lt;/a&gt; I wrote about a embedded device running Linux where a MAC address is stored in the EEPROM. The first six bytes are reserved for the MAC address which (ideally) only should be written once.&lt;/p&gt;
&lt;p&gt;To apply the MAC address the numbers need to be hexadecimal formatted and separated with a colon(&lt;code&gt;:&lt;/code&gt;) symbol. It is possible to dynamically change the MAC address of Ethernet, beware that you need to be &lt;code&gt;root&lt;/code&gt; and that the ethernet interface is not up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ifconfig eth0 hw ether 00:01:02:03:04:05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, you could permanently change the MAC address by setting it into the &lt;code&gt;hwaddress&lt;/code&gt; in the &lt;code&gt;/etc/network/interfaces&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;auto eth0
iface eth0 inet dhcp
    hwaddress ether 00:01:02:03:04:05
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we know how and where to set the MAC address. Next, we can read the first six bytes using &lt;code&gt;dd&lt;/code&gt; and pipe it to &lt;code&gt;hexdump&lt;/code&gt;. Fortunately, &lt;a href=&#34;https://www.man7.org/linux/man-pages/man1/hexdump.1.html&#34;&gt;hexdump&lt;/a&gt; already provides API for formatting the input.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-e &#39;1/1&#39; %02x&lt;/code&gt; parameter will format each space followed by a byte into a hexadecimal number with two digits and a leading zero if needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;DELIMITER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;
MAC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$EEPROM bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | hexdump -ve &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1/1 &amp;#34;%02x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$DELIMITER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
echo $MAC &lt;span style=&#34;color:#75715e&#34;&gt;# output 00:01:02:03:04:05:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finnaly the trailing colon &lt;code&gt;:&lt;/code&gt; needs to be removed. There are multiple ways to do this&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pipe the output to &lt;code&gt;sed&lt;/code&gt; and replace the last &lt;code&gt;:&lt;/code&gt; OR&lt;/li&gt;
&lt;li&gt;Use Bash Substring Expansion to remove the character from a string.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solution 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;MAC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$EEPROM bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | hexdump -ve &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1/1 &amp;#34;%02x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$DELIMITER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; | sed s/:$//g&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Solution 2:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;MAC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$EEPROM bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | hexdump -ve &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1/1 &amp;#34;%02x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$DELIMITER&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
MAC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;MAC:&lt;span style=&#34;color:#66d9ef&#34;&gt;:-&lt;/span&gt;1&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Remove last character &amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Personally I prefer solution 2 since I find that &lt;code&gt;sed&lt;/code&gt; harder to read and I often have to explain it to other engineers who are reviewing it. Therefore solution 2 (with a comment) is clearer. If you are a system expert and love one-lines, go for solution 1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create an interactive Yocto shell</title>
      <link>https://ovaar.github.io/blog/how-to-create-an-interactive-yocto-shell/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/how-to-create-an-interactive-yocto-shell/</guid>
      <description>&lt;p&gt;This post is about a feature request which I have implemented, at time of writing, about 2 years back. It always stuck with me because the project I was doing at the time was my first yocto experience. Topic has its own &lt;a href=&#34;https://github.com/topic-embedded-products/topic-platform&#34;&gt;BSP&lt;/a&gt; for FPGA boards on top of a Linux distribution. A custom board was specifically designed for a customor which would run our software that would interface with another custom low power embedded device.&lt;/p&gt;
&lt;p&gt;Due to an increasing demand of delivering production ready devices to our customer, delivering actual software features became more and more challenging. Making the devices production ready required some manual steps and was something we did in-house.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a bootable SD card with a yocto image containing an &lt;a href=&#34;https://github.com/sbabic/swupdate&#34;&gt;swupdate&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;Erase NOR-flash&lt;/li&gt;
&lt;li&gt;Run swupdate and select the right boot partition&lt;/li&gt;
&lt;li&gt;Erase EEPROM&lt;/li&gt;
&lt;li&gt;Write MAC address to EEPROM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This turned out to be error sensitive process. So I decided to create a script which restricts the user input and does validation on the MAC address. Also it could flash the swupdate package, erase flash, write to EEPROM, erase the EEPROM and would prompt the user to select the boot partition to write the swupdate package to. Now I had the script, but still I needed to enter user credentials every time I booted from the SD-card. Would it not be great to bypass the getty login prompt and then run the script interactively 🤓!&lt;/p&gt;
&lt;p&gt;Enough talk, lets dive in&amp;hellip;.&lt;/p&gt;
&lt;p&gt;Bitbake allows for running code after succesfully building the root filesystem. The &lt;code&gt;ROOTFS_POSTPROCESS_COMMAND&lt;/code&gt; allowed to edit the getty systemd service files using &lt;a href=&#34;https://www.gnu.org/software/sed/manual/sed.html&#34;&gt;sed&lt;/a&gt;. Most importantly if you would open &lt;code&gt;console-getty.service&lt;/code&gt; it runs &lt;code&gt;agetty&lt;/code&gt; on the terminal in order to prompt for the user login. That not what I wanted, so I replaced it with &lt;code&gt;stty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;console-getty.service&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Console Getty&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;systemd-user-sessions.service plymouth-quit-wait.service&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;getty.target&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-/sbin/agetty --noclear --keep-baud console 115200,38400,9600 $TERM&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;idle&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;always&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;RestartSec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;UtmpIdentifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cons&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TTYPath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/dev/console&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TTYReset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yes&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;TTYVHangup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yes&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KillMode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;process&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;IgnoreSIGPIPE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;no&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;SendSIGHUP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yes&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;getty.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;interactive.bb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;GETTY_SYSTEMD_SERVICES &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{IMAGE_ROOTFS}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{systemd_system_unitdir}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/serial-getty@.service &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{IMAGE_ROOTFS}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{systemd_system_unitdir}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/console-getty.service &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{IMAGE_ROOTFS}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{systemd_system_unitdir}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/getty@.service &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    $&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{IMAGE_ROOTFS}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{systemd_system_unitdir}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/container-getty@.service &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Replace agetty, which prompts for a user login&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# with stty. Than disable tty reset and hangup to&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# continue the user input stream.&lt;/span&gt;
disable_login_prompt () {
    sed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^\(ExecStart *=\(.*\)$\)/ExecStart=-\/bin\/stty -F \/dev\/ttyPS0 115200 cs8 sane /&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{GETTY_SYSTEMD_SERVICES}
    sed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^\(TTYVHangup=yes$\)/TTYVHangup=no/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{GETTY_SYSTEMD_SERVICES}
    sed &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^\(TTYReset=yes$\)/TTYReset=no/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{GETTY_SYSTEMD_SERVICES}
}

ROOTFS_POSTPROCESS_COMMAND &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disable_login_prompt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next create a systemd service which runs after getty has started which to execute the interactive script.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;interactive.service&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Interactive installation script that runs at startup.&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;getty.target multi-user.target&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oneshot&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;RemainAfterExit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yes&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/root/run-interactive-script&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;StandardInput&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tty-force&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;StandardOutput&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;inherit&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;StandardError&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;inherit&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can boot your system without an user login promp but still access all features of your BSP running Linux.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://ovaar.github.io/blog/first-post/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ovaar.github.io/blog/first-post/</guid>
      <description>&lt;p&gt;After a long time thinking whether I would or should start a blog, I finally have! As a dyslectic software engineer this is exciting for me because writing and reading is not easy for me. (Spoiler) Some very critical readers will find flaws in my writing, I am sure about that 😇.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/13GIgrGdslD9oQ/giphy.gif&#34; alt=&#34;jim carry typing&#34;&gt;&lt;/p&gt;
&lt;p&gt;The reason I have started this blog is to write about my best achievements, creative solutions to problems me and my colleagues have come up with over time, to inspire others about software engineering, to reflect about my professional career but also to improve my technical writing skills.&lt;/p&gt;
&lt;p&gt;If you are still interested, continue reading&amp;hellip;
I will give a short introduction about myself, my name is Thomas Reynders I am a enthusiastic software engineer. I live and work in the Dutch Silicon Valley area: Eindhoven. Since I was just a little kid I have been interested in technology. My dad worked at Philips and always had some hardware such as radios laying around which I could take apart. While video games got me hooked to playing with computers I always have felt a relation to hardware. It intrigues me and it has some kind of magical about it. My technical interest are in the IoT and high speed data processing domain. Working with embedded devices or big machines is awesome because making a product come to life and seeing things come together is super satisfying! (I think allot of engineers can relate to this 😁). In my free time I like to work in the garden, working on personal projects such as the smart mirror &amp;ldquo;&lt;a href=&#34;https://github.com/ovaar/mirrorm8/tree/dev&#34;&gt;mirrorm8&lt;/a&gt;&amp;rdquo; and doing sports such as running and cycling.&lt;/p&gt;
&lt;p&gt;To finish my first post I would like to thank &lt;a href=&#34;https://github.com/andybrewer&#34;&gt;andybrewer&lt;/a&gt; for building &lt;a href=&#34;https://andybrewer.github.io/mvp/&#34;&gt;MVP.css&lt;/a&gt; and &lt;a href=&#34;https://github.com/andybrewer&#34;&gt;embik&lt;/a&gt; for building a Hugo &lt;a href=&#34;https://github.com/embik/hugo-theme-lyla.git&#34;&gt;theme&lt;/a&gt; 👍.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

